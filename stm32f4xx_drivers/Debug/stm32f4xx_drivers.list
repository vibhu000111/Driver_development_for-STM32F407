
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007e4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800098c  08000994  00010994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800098c  0800098c  00010994  2**0
                  CONTENTS
  4 .ARM          00000000  0800098c  0800098c  00010994  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800098c  08000994  00010994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800098c  0800098c  0001098c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000990  08000990  00010990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010994  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010994  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000aa5  00000000  00000000  000109c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000027a  00000000  00000000  00011469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  000116e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c0  00000000  00000000  000117b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014bc  00000000  00000000  00011878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000dab  00000000  00000000  00012d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000538c  00000000  00000000  00013adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00018e6b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000290  00000000  00000000  00018ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000974 	.word	0x08000974

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000974 	.word	0x08000974

080001e8 <EXTI0_IRQHandler>:
 */
#include <stm32f407xx.h>
#include <stm32f407xx_gpio_driver.h>

void EXTI0_IRQHandler()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	GPIO_ToggleOutputPin(GPIOD ,12);
 80001ee:	210c      	movs	r1, #12
 80001f0:	4808      	ldr	r0, [pc, #32]	; (8000214 <EXTI0_IRQHandler+0x2c>)
 80001f2:	f000 fac3 	bl	800077c <GPIO_ToggleOutputPin>
	//uint32_t* pEXTI_PR=(uint32_t*)(EXTI_BASEADDR + 0x14);
		//	*pEXTI_PR|=(1<<0);


	GPIO_IRQHandling(0);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f000 fb78 	bl	80008ec <GPIO_IRQHandling>
	uint32_t* pNVIC_ICPR0=(uint32_t*)(0XE000E280);
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <EXTI0_IRQHandler+0x30>)
 80001fe:	607b      	str	r3, [r7, #4]
			*pNVIC_ICPR0|=(1<<6);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	40020c00 	.word	0x40020c00
 8000218:	e000e280 	.word	0xe000e280

0800021c <main>:
//PA0 for input
//PD12 for toggle
int main()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0

	//configure PD12 for output
	GPIO_Handle_t pGPIOD ;
	pGPIOD.pGPIOx=GPIOD;
 8000222:	4b17      	ldr	r3, [pc, #92]	; (8000280 <main+0x64>)
 8000224:	60fb      	str	r3, [r7, #12]
	pGPIOD.GPIO_pin.GPIO_PinNumber=12;
 8000226:	230c      	movs	r3, #12
 8000228:	743b      	strb	r3, [r7, #16]
	pGPIOD.GPIO_pin.GPIO_PinMode=OUTPUT;
 800022a:	2301      	movs	r3, #1
 800022c:	747b      	strb	r3, [r7, #17]
	pGPIOD.GPIO_pin.GPIO_PinOPType=0;
 800022e:	2300      	movs	r3, #0
 8000230:	753b      	strb	r3, [r7, #20]
	pGPIOD.GPIO_pin.GPIO_PinPUPD= GPIO_NO_PUPD;
 8000232:	2300      	movs	r3, #0
 8000234:	74fb      	strb	r3, [r7, #19]
	pGPIOD.GPIO_pin.GPIO_PinSpeed=GPIO_SPEED_LOW;
 8000236:	2300      	movs	r3, #0
 8000238:	74bb      	strb	r3, [r7, #18]

	//configure PA0 for input
	GPIO_Handle_t pGPIOA ;
	pGPIOA.pGPIOx=GPIOA;
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <main+0x68>)
 800023c:	603b      	str	r3, [r7, #0]
		pGPIOA.GPIO_pin.GPIO_PinNumber=0;
 800023e:	2300      	movs	r3, #0
 8000240:	713b      	strb	r3, [r7, #4]
		pGPIOA.GPIO_pin.GPIO_PinMode=GPIO_MODE_RT;
 8000242:	2305      	movs	r3, #5
 8000244:	717b      	strb	r3, [r7, #5]
		pGPIOA.GPIO_pin.GPIO_PinOPType=0;
 8000246:	2300      	movs	r3, #0
 8000248:	723b      	strb	r3, [r7, #8]
		pGPIOA.GPIO_pin.GPIO_PinPUPD= GPIO_NO_PUPD;
 800024a:	2300      	movs	r3, #0
 800024c:	71fb      	strb	r3, [r7, #7]
		pGPIOA.GPIO_pin.GPIO_PinSpeed=GPIO_SPEED_HIGH;
 800024e:	2302      	movs	r3, #2
 8000250:	71bb      	strb	r3, [r7, #6]

	GPIO_Peripehral_clk_control(GPIOA,ENABLE);
 8000252:	2101      	movs	r1, #1
 8000254:	480b      	ldr	r0, [pc, #44]	; (8000284 <main+0x68>)
 8000256:	f000 f9b3 	bl	80005c0 <GPIO_Peripehral_clk_control>
	GPIO_Peripehral_clk_control(GPIOD,ENABLE);
 800025a:	2101      	movs	r1, #1
 800025c:	4808      	ldr	r0, [pc, #32]	; (8000280 <main+0x64>)
 800025e:	f000 f9af 	bl	80005c0 <GPIO_Peripehral_clk_control>

	GPIO_init(&pGPIOD);
 8000262:	f107 030c 	add.w	r3, r7, #12
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f838 	bl	80002dc <GPIO_init>
	GPIO_init(&pGPIOA);
 800026c:	463b      	mov	r3, r7
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f834 	bl	80002dc <GPIO_init>
	*pEXTI_RT|=(1<<0);
	uint32_t* pEXTI_IMR = (uint32_t*)(EXTI_BASEADDR);
	*pEXTI_IMR|=(1<<0);*/
	//uint32_t* pNVIC_ISER0 = (uint32_t*) 0xE000E100;
	//*pNVIC_ISER0|=(1<<6); //enable Interrput on IRQ6 for EXTI0
	GPIO_IRQConfig(6,ENABLE);
 8000274:	2101      	movs	r1, #1
 8000276:	2006      	movs	r0, #6
 8000278:	f000 faf2 	bl	8000860 <GPIO_IRQConfig>

	while(1)
 800027c:	e7fe      	b.n	800027c <main+0x60>
 800027e:	bf00      	nop
 8000280:	40020c00 	.word	0x40020c00
 8000284:	40020000 	.word	0x40020000

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	; (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	; (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 fb39 	bl	800092c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ffaf 	bl	800021c <main>

080002be <LoopForever>:

LoopForever:
    b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002cc:	08000994 	.word	0x08000994
  ldr r2, =_sbss
 80002d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d4:	2000001c 	.word	0x2000001c

080002d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC_IRQHandler>
	...

080002dc <GPIO_init>:
 *
 */

void GPIO_init(GPIO_Handle_t *pGPIOHandle) //user application should create a variable of GPIO_Handle_t type initialize it and send the pointer
//to GPIO_intit function to initialize the GPIO port and Pin
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	GPIO_RegDef_t* GPIO_temp = pGPIOHandle->pGPIOx; // initializing the a temporary pointer to structure variable that holds the base address of the GPIO Port
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	61fb      	str	r3, [r7, #28]
       11: Analog mode
       Assign Macro in the driver header file for this
	 */

	// configure MODER register
	uint8_t MODE = pGPIOHandle->GPIO_pin.GPIO_PinMode;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	795b      	ldrb	r3, [r3, #5]
 80002ee:	76fb      	strb	r3, [r7, #27]
	GPIO_temp->MODER&=~(3<<((pGPIOHandle->GPIO_pin.GPIO_PinNumber)*2)); // clears the MODER bit to be set before setting the value
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	7912      	ldrb	r2, [r2, #4]
 80002f8:	0052      	lsls	r2, r2, #1
 80002fa:	2103      	movs	r1, #3
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	401a      	ands	r2, r3
 8000304:	69fb      	ldr	r3, [r7, #28]
 8000306:	601a      	str	r2, [r3, #0]
	if(MODE<=3) //check the  code more optimized
 8000308:	7efb      	ldrb	r3, [r7, #27]
 800030a:	2b03      	cmp	r3, #3
 800030c:	d83d      	bhi.n	800038a <GPIO_init+0xae>
	{
	if( MODE == INPUT)
 800030e:	7efb      	ldrb	r3, [r7, #27]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d10c      	bne.n	800032e <GPIO_init+0x52>
	{
		GPIO_temp->MODER&=~(3<<((pGPIOHandle->GPIO_pin.GPIO_PinNumber)*2));
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	7912      	ldrb	r2, [r2, #4]
 800031c:	0052      	lsls	r2, r2, #1
 800031e:	2103      	movs	r1, #3
 8000320:	fa01 f202 	lsl.w	r2, r1, r2
 8000324:	43d2      	mvns	r2, r2
 8000326:	401a      	ands	r2, r3
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	e0b6      	b.n	800049c <GPIO_init+0x1c0>
	}
	else if (MODE == OUTPUT)
 800032e:	7efb      	ldrb	r3, [r7, #27]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d10b      	bne.n	800034c <GPIO_init+0x70>
	{
		GPIO_temp->MODER|=(1<<((pGPIOHandle->GPIO_pin.GPIO_PinNumber)*2));
 8000334:	69fb      	ldr	r3, [r7, #28]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	7912      	ldrb	r2, [r2, #4]
 800033c:	0052      	lsls	r2, r2, #1
 800033e:	2101      	movs	r1, #1
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	431a      	orrs	r2, r3
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	e0a7      	b.n	800049c <GPIO_init+0x1c0>
	}
	else if(MODE == ALTFN)
 800034c:	7efb      	ldrb	r3, [r7, #27]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d10b      	bne.n	800036a <GPIO_init+0x8e>
	{
		GPIO_temp->MODER|=(2<<((pGPIOHandle->GPIO_pin.GPIO_PinNumber)*2));
 8000352:	69fb      	ldr	r3, [r7, #28]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	7912      	ldrb	r2, [r2, #4]
 800035a:	0052      	lsls	r2, r2, #1
 800035c:	2102      	movs	r1, #2
 800035e:	fa01 f202 	lsl.w	r2, r1, r2
 8000362:	431a      	orrs	r2, r3
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	e098      	b.n	800049c <GPIO_init+0x1c0>
	}
	else if(MODE == ANALOG)
 800036a:	7efb      	ldrb	r3, [r7, #27]
 800036c:	2b03      	cmp	r3, #3
 800036e:	f040 8095 	bne.w	800049c <GPIO_init+0x1c0>
	{
		GPIO_temp->MODER|=(3<<((pGPIOHandle->GPIO_pin.GPIO_PinNumber)*2));
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	7912      	ldrb	r2, [r2, #4]
 800037a:	0052      	lsls	r2, r2, #1
 800037c:	2103      	movs	r1, #3
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	431a      	orrs	r2, r3
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	e088      	b.n	800049c <GPIO_init+0x1c0>
	}
	}
	else
	{
		GPIO_temp->MODER&=~(3<<((pGPIOHandle->GPIO_pin.GPIO_PinNumber)*2)); // pin should be in input mode
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	7912      	ldrb	r2, [r2, #4]
 8000392:	0052      	lsls	r2, r2, #1
 8000394:	2103      	movs	r1, #3
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	43d2      	mvns	r2, r2
 800039c:	401a      	ands	r2, r3
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	601a      	str	r2, [r3, #0]
		//interrupt mode
		if(pGPIOHandle->GPIO_pin.GPIO_PinMode == GPIO_MODE_FT)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	795b      	ldrb	r3, [r3, #5]
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d117      	bne.n	80003da <GPIO_init+0xfe>
		{
			EXTI->EXTI_FTSR|=(1 << pGPIOHandle->GPIO_pin.GPIO_PinNumber); // configuring edge detector in EXTI to generate interrupt at falling edge
 80003aa:	4b82      	ldr	r3, [pc, #520]	; (80005b4 <GPIO_init+0x2d8>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	7912      	ldrb	r2, [r2, #4]
 80003b2:	4611      	mov	r1, r2
 80003b4:	2201      	movs	r2, #1
 80003b6:	408a      	lsls	r2, r1
 80003b8:	4611      	mov	r1, r2
 80003ba:	4a7e      	ldr	r2, [pc, #504]	; (80005b4 <GPIO_init+0x2d8>)
 80003bc:	430b      	orrs	r3, r1
 80003be:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR&=~(1<< pGPIOHandle->GPIO_pin.GPIO_PinNumber);
 80003c0:	4b7c      	ldr	r3, [pc, #496]	; (80005b4 <GPIO_init+0x2d8>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	7912      	ldrb	r2, [r2, #4]
 80003c8:	4611      	mov	r1, r2
 80003ca:	2201      	movs	r2, #1
 80003cc:	408a      	lsls	r2, r1
 80003ce:	43d2      	mvns	r2, r2
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a78      	ldr	r2, [pc, #480]	; (80005b4 <GPIO_init+0x2d8>)
 80003d4:	400b      	ands	r3, r1
 80003d6:	6093      	str	r3, [r2, #8]
 80003d8:	e035      	b.n	8000446 <GPIO_init+0x16a>
		}
		else if(pGPIOHandle->GPIO_pin.GPIO_PinMode == GPIO_MODE_RT)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	795b      	ldrb	r3, [r3, #5]
 80003de:	2b05      	cmp	r3, #5
 80003e0:	d117      	bne.n	8000412 <GPIO_init+0x136>
		{
			EXTI->EXTI_RTSR|=(1<< pGPIOHandle->GPIO_pin.GPIO_PinNumber);
 80003e2:	4b74      	ldr	r3, [pc, #464]	; (80005b4 <GPIO_init+0x2d8>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	7912      	ldrb	r2, [r2, #4]
 80003ea:	4611      	mov	r1, r2
 80003ec:	2201      	movs	r2, #1
 80003ee:	408a      	lsls	r2, r1
 80003f0:	4611      	mov	r1, r2
 80003f2:	4a70      	ldr	r2, [pc, #448]	; (80005b4 <GPIO_init+0x2d8>)
 80003f4:	430b      	orrs	r3, r1
 80003f6:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR&=~(1<< pGPIOHandle->GPIO_pin.GPIO_PinNumber);
 80003f8:	4b6e      	ldr	r3, [pc, #440]	; (80005b4 <GPIO_init+0x2d8>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	7912      	ldrb	r2, [r2, #4]
 8000400:	4611      	mov	r1, r2
 8000402:	2201      	movs	r2, #1
 8000404:	408a      	lsls	r2, r1
 8000406:	43d2      	mvns	r2, r2
 8000408:	4611      	mov	r1, r2
 800040a:	4a6a      	ldr	r2, [pc, #424]	; (80005b4 <GPIO_init+0x2d8>)
 800040c:	400b      	ands	r3, r1
 800040e:	60d3      	str	r3, [r2, #12]
 8000410:	e019      	b.n	8000446 <GPIO_init+0x16a>
		}
		else if(pGPIOHandle->GPIO_pin.GPIO_PinMode == GPIO_MODE_RTFT)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	795b      	ldrb	r3, [r3, #5]
 8000416:	2b06      	cmp	r3, #6
 8000418:	d115      	bne.n	8000446 <GPIO_init+0x16a>
		{
			EXTI->EXTI_FTSR|=(1 << pGPIOHandle->GPIO_pin.GPIO_PinNumber);
 800041a:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <GPIO_init+0x2d8>)
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	7912      	ldrb	r2, [r2, #4]
 8000422:	4611      	mov	r1, r2
 8000424:	2201      	movs	r2, #1
 8000426:	408a      	lsls	r2, r1
 8000428:	4611      	mov	r1, r2
 800042a:	4a62      	ldr	r2, [pc, #392]	; (80005b4 <GPIO_init+0x2d8>)
 800042c:	430b      	orrs	r3, r1
 800042e:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR|=(1<< pGPIOHandle->GPIO_pin.GPIO_PinNumber);
 8000430:	4b60      	ldr	r3, [pc, #384]	; (80005b4 <GPIO_init+0x2d8>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	7912      	ldrb	r2, [r2, #4]
 8000438:	4611      	mov	r1, r2
 800043a:	2201      	movs	r2, #1
 800043c:	408a      	lsls	r2, r1
 800043e:	4611      	mov	r1, r2
 8000440:	4a5c      	ldr	r2, [pc, #368]	; (80005b4 <GPIO_init+0x2d8>)
 8000442:	430b      	orrs	r3, r1
 8000444:	6093      	str	r3, [r2, #8]
		}
		uint32_t k;
		//Configure SYSCFG register
		// have a look at the register lay out
		k = GPIO_baseaddr_to_code(pGPIOHandle->pGPIOx);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f9ac 	bl	80007a8 <GPIO_baseaddr_to_code>
 8000450:	6178      	str	r0, [r7, #20]
		else if(pGPIOHandle->pGPIOx == GPIOH)
			k=PH;
		else if(pGPIOHandle->pGPIOx == GPIOI)
			k=PI;
			*/
		SYSCFG_PCLK_EN();
 8000452:	4b59      	ldr	r3, [pc, #356]	; (80005b8 <GPIO_init+0x2dc>)
 8000454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000456:	4a58      	ldr	r2, [pc, #352]	; (80005b8 <GPIO_init+0x2dc>)
 8000458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800045c:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[(pGPIOHandle->GPIO_pin.GPIO_PinNumber)/4]|=(k << (pGPIOHandle->GPIO_pin.GPIO_PinNumber)*4);
 800045e:	4a57      	ldr	r2, [pc, #348]	; (80005bc <GPIO_init+0x2e0>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	089b      	lsrs	r3, r3, #2
 8000466:	b2d8      	uxtb	r0, r3
 8000468:	4603      	mov	r3, r0
 800046a:	3302      	adds	r3, #2
 800046c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	6979      	ldr	r1, [r7, #20]
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	494f      	ldr	r1, [pc, #316]	; (80005bc <GPIO_init+0x2e0>)
 800047e:	431a      	orrs	r2, r3
 8000480:	1c83      	adds	r3, r0, #2
 8000482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// Unmask the interrupt to NVIC engine by unmasking bit in the IMR register
		EXTI->EXTI_IMR|=(1<<pGPIOHandle->GPIO_pin.GPIO_PinNumber);
 8000486:	4b4b      	ldr	r3, [pc, #300]	; (80005b4 <GPIO_init+0x2d8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	7912      	ldrb	r2, [r2, #4]
 800048e:	4611      	mov	r1, r2
 8000490:	2201      	movs	r2, #1
 8000492:	408a      	lsls	r2, r1
 8000494:	4611      	mov	r1, r2
 8000496:	4a47      	ldr	r2, [pc, #284]	; (80005b4 <GPIO_init+0x2d8>)
 8000498:	430b      	orrs	r3, r1
 800049a:	6013      	str	r3, [r2, #0]

	}

	//configure speed
	GPIO_temp->OSPEEDR&=~(3 << ((pGPIOHandle->GPIO_pin.GPIO_PinNumber)*2)); //clearing the bits before setting
 800049c:	69fb      	ldr	r3, [r7, #28]
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	7912      	ldrb	r2, [r2, #4]
 80004a4:	0052      	lsls	r2, r2, #1
 80004a6:	2103      	movs	r1, #3
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	43d2      	mvns	r2, r2
 80004ae:	401a      	ands	r2, r3
 80004b0:	69fb      	ldr	r3, [r7, #28]
 80004b2:	609a      	str	r2, [r3, #8]
	GPIO_temp->OSPEEDR|=(pGPIOHandle->GPIO_pin.GPIO_PinSpeed << ((pGPIOHandle->GPIO_pin.GPIO_PinNumber)*2));
 80004b4:	69fb      	ldr	r3, [r7, #28]
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	7992      	ldrb	r2, [r2, #6]
 80004bc:	4611      	mov	r1, r2
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	0052      	lsls	r2, r2, #1
 80004c4:	fa01 f202 	lsl.w	r2, r1, r2
 80004c8:	431a      	orrs	r2, r3
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	609a      	str	r2, [r3, #8]
	//configure PUPD
	GPIO_temp->PUPDR&=~(3 << ((pGPIOHandle->GPIO_pin.GPIO_PinNumber)*2));// clearing the bits before setting
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	7912      	ldrb	r2, [r2, #4]
 80004d6:	0052      	lsls	r2, r2, #1
 80004d8:	2103      	movs	r1, #3
 80004da:	fa01 f202 	lsl.w	r2, r1, r2
 80004de:	43d2      	mvns	r2, r2
 80004e0:	401a      	ands	r2, r3
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	60da      	str	r2, [r3, #12]
	GPIO_temp->PUPDR|=pGPIOHandle->GPIO_pin.GPIO_PinPUPD << ((pGPIOHandle->GPIO_pin.GPIO_PinNumber)*2);
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	79d2      	ldrb	r2, [r2, #7]
 80004ee:	4611      	mov	r1, r2
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	7912      	ldrb	r2, [r2, #4]
 80004f4:	0052      	lsls	r2, r2, #1
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	431a      	orrs	r2, r3
 80004fc:	69fb      	ldr	r3, [r7, #28]
 80004fe:	60da      	str	r2, [r3, #12]
	//configure opttype
	GPIO_temp->OTYPER&=~( 1 <<((pGPIOHandle->GPIO_pin.GPIO_PinNumber))); // clear the OUTPUTTYPE BIT for the specific pin before setting it
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7912      	ldrb	r2, [r2, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	43d2      	mvns	r2, r2
 8000510:	401a      	ands	r2, r3
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	605a      	str	r2, [r3, #4]
	GPIO_temp->OTYPER|=pGPIOHandle->GPIO_pin.GPIO_PinOPType <<((pGPIOHandle->GPIO_pin.GPIO_PinNumber));
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	7a12      	ldrb	r2, [r2, #8]
 800051e:	4611      	mov	r1, r2
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	7912      	ldrb	r2, [r2, #4]
 8000524:	fa01 f202 	lsl.w	r2, r1, r2
 8000528:	431a      	orrs	r2, r3
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	605a      	str	r2, [r3, #4]
	/*Alternate functionality needs to be configures if in the output mode Altfn is selected
	 * There are two AFR registers AFRH and AFRL
	 * now the AFRL register for a port is used to map alternate function to the pin from pin 0 to pin 7
	 * AFRH is used to map alternate function to the pin from pin 8 to pin 15
	 */
	if(MODE == ALTFN)
 800052e:	7efb      	ldrb	r3, [r7, #27]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d13b      	bne.n	80005ac <GPIO_init+0x2d0>
	{
		GPIO_RegDef_t* temp = pGPIOHandle->pGPIOx;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	613b      	str	r3, [r7, #16]

		uint8_t reg_h_l = (pGPIOHandle->GPIO_pin.GPIO_PinNumber)/8; // if quotient is 0 means AFRL if 1 AFRH
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	08db      	lsrs	r3, r3, #3
 8000540:	73fb      	strb	r3, [r7, #15]
		uint8_t reg_bit = ((pGPIOHandle->GPIO_pin.GPIO_PinNumber)%8)*4; // check AFRH and AFRL register definition each pin is taking 4 bits
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	b2db      	uxtb	r3, r3
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	73bb      	strb	r3, [r7, #14]

		if(reg_h_l == 1) //select the AFRH register
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d115      	bne.n	8000582 <GPIO_init+0x2a6>
		{
			temp->AFRH&=~(15 << reg_bit);
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	7bba      	ldrb	r2, [r7, #14]
 800055c:	210f      	movs	r1, #15
 800055e:	fa01 f202 	lsl.w	r2, r1, r2
 8000562:	43d2      	mvns	r2, r2
 8000564:	401a      	ands	r2, r3
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
			temp->AFRH|=(pGPIOHandle->GPIO_pin.GPIO_PinAltFunMode << reg_bit);
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7a52      	ldrb	r2, [r2, #9]
 8000572:	4611      	mov	r1, r2
 8000574:	7bba      	ldrb	r2, [r7, #14]
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	431a      	orrs	r2, r3
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	625a      	str	r2, [r3, #36]	; 0x24

	}



}
 8000580:	e014      	b.n	80005ac <GPIO_init+0x2d0>
			temp->AFRL&=~(15 << reg_bit);
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	6a1b      	ldr	r3, [r3, #32]
 8000586:	7bba      	ldrb	r2, [r7, #14]
 8000588:	210f      	movs	r1, #15
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	43d2      	mvns	r2, r2
 8000590:	401a      	ands	r2, r3
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	621a      	str	r2, [r3, #32]
			temp->AFRL|=(pGPIOHandle->GPIO_pin.GPIO_PinAltFunMode << reg_bit);
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	7a52      	ldrb	r2, [r2, #9]
 800059e:	4611      	mov	r1, r2
 80005a0:	7bba      	ldrb	r2, [r7, #14]
 80005a2:	fa01 f202 	lsl.w	r2, r1, r2
 80005a6:	431a      	orrs	r2, r3
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	621a      	str	r2, [r3, #32]
}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40013c00 	.word	0x40013c00
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40013800 	.word	0x40013800

080005c0 <GPIO_Peripehral_clk_control>:
		}
}

void GPIO_Peripehral_clk_control(GPIO_RegDef_t *pGPIOx,uint8_t EnDi) //to enable or disable the clock I need to know the base adddress of the
//GPIO which can then be mapped to which bit to set or reset in the RCC AHB1 ENR register
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	70fb      	strb	r3, [r7, #3]
	if(EnDi == ENABLE)
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d162      	bne.n	8000698 <GPIO_Peripehral_clk_control+0xd8>
	{
		if(pGPIOx == GPIOA)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a5f      	ldr	r2, [pc, #380]	; (8000754 <GPIO_Peripehral_clk_control+0x194>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d106      	bne.n	80005e8 <GPIO_Peripehral_clk_control+0x28>
		{
			GPIOA_PCLK_EN();
 80005da:	4b5f      	ldr	r3, [pc, #380]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a5e      	ldr	r2, [pc, #376]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
				{
					GPIOH_PCLK_DI();
				}

	}
}
 80005e6:	e0ae      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
		else if(pGPIOx == GPIOB)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a5c      	ldr	r2, [pc, #368]	; (800075c <GPIO_Peripehral_clk_control+0x19c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d106      	bne.n	80005fe <GPIO_Peripehral_clk_control+0x3e>
			GPIOB_PCLK_EN();
 80005f0:	4b59      	ldr	r3, [pc, #356]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	4a58      	ldr	r2, [pc, #352]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80005f6:	f043 0302 	orr.w	r3, r3, #2
 80005fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005fc:	e0a3      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
		else if(pGPIOx == GPIOC)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a57      	ldr	r2, [pc, #348]	; (8000760 <GPIO_Peripehral_clk_control+0x1a0>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d106      	bne.n	8000614 <GPIO_Peripehral_clk_control+0x54>
			GPIOC_PCLK_EN();
 8000606:	4b54      	ldr	r3, [pc, #336]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a53      	ldr	r2, [pc, #332]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000612:	e098      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
		else if(pGPIOx == GPIOD)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a53      	ldr	r2, [pc, #332]	; (8000764 <GPIO_Peripehral_clk_control+0x1a4>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d106      	bne.n	800062a <GPIO_Peripehral_clk_control+0x6a>
			GPIOD_PCLK_EN();
 800061c:	4b4e      	ldr	r3, [pc, #312]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	4a4d      	ldr	r2, [pc, #308]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000628:	e08d      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
		else if(pGPIOx == GPIOE)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a4e      	ldr	r2, [pc, #312]	; (8000768 <GPIO_Peripehral_clk_control+0x1a8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d106      	bne.n	8000640 <GPIO_Peripehral_clk_control+0x80>
			GPIOE_PCLK_EN();
 8000632:	4b49      	ldr	r3, [pc, #292]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a48      	ldr	r2, [pc, #288]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000638:	f043 0310 	orr.w	r3, r3, #16
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800063e:	e082      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
		else if(pGPIOx == GPIOF)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a4a      	ldr	r2, [pc, #296]	; (800076c <GPIO_Peripehral_clk_control+0x1ac>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d106      	bne.n	8000656 <GPIO_Peripehral_clk_control+0x96>
			GPIOF_PCLK_EN();
 8000648:	4b43      	ldr	r3, [pc, #268]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	4a42      	ldr	r2, [pc, #264]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000654:	e077      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
		else if(pGPIOx == GPIOG)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a45      	ldr	r2, [pc, #276]	; (8000770 <GPIO_Peripehral_clk_control+0x1b0>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d106      	bne.n	800066c <GPIO_Peripehral_clk_control+0xac>
			GPIOG_PCLK_EN();
 800065e:	4b3e      	ldr	r3, [pc, #248]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a3d      	ldr	r2, [pc, #244]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
}
 800066a:	e06c      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
		else if(pGPIOx == GPIOH)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a41      	ldr	r2, [pc, #260]	; (8000774 <GPIO_Peripehral_clk_control+0x1b4>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d106      	bne.n	8000682 <GPIO_Peripehral_clk_control+0xc2>
			GPIOH_PCLK_EN();
 8000674:	4b38      	ldr	r3, [pc, #224]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	4a37      	ldr	r2, [pc, #220]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 800067a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000680:	e061      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
		else if(pGPIOx == GPIOI)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <GPIO_Peripehral_clk_control+0x1b8>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d15d      	bne.n	8000746 <GPIO_Peripehral_clk_control+0x186>
			GPIOI_PCLK_EN();
 800068a:	4b33      	ldr	r3, [pc, #204]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a32      	ldr	r2, [pc, #200]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000696:	e056      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
		if(pGPIOx == GPIOA)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <GPIO_Peripehral_clk_control+0x194>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d106      	bne.n	80006ae <GPIO_Peripehral_clk_control+0xee>
					GPIOA_PCLK_DI();
 80006a0:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	4a2c      	ldr	r2, [pc, #176]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ac:	e04b      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
				else if(pGPIOx == GPIOB)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a2a      	ldr	r2, [pc, #168]	; (800075c <GPIO_Peripehral_clk_control+0x19c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d106      	bne.n	80006c4 <GPIO_Peripehral_clk_control+0x104>
					GPIOB_PCLK_DI();
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a27      	ldr	r2, [pc, #156]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80006bc:	f023 0302 	bic.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c2:	e040      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
				else if(pGPIOx == GPIOC)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a26      	ldr	r2, [pc, #152]	; (8000760 <GPIO_Peripehral_clk_control+0x1a0>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d106      	bne.n	80006da <GPIO_Peripehral_clk_control+0x11a>
					GPIOC_PCLK_DI();
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80006d2:	f023 0304 	bic.w	r3, r3, #4
 80006d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d8:	e035      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
				else if(pGPIOx == GPIOD)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <GPIO_Peripehral_clk_control+0x1a4>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d106      	bne.n	80006f0 <GPIO_Peripehral_clk_control+0x130>
					GPIOD_PCLK_DI();
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80006e8:	f023 0308 	bic.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ee:	e02a      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
				else if(pGPIOx == GPIOE)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <GPIO_Peripehral_clk_control+0x1a8>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d106      	bne.n	8000706 <GPIO_Peripehral_clk_control+0x146>
					GPIOE_PCLK_DI();
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 80006fe:	f023 0310 	bic.w	r3, r3, #16
 8000702:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000704:	e01f      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
				else if(pGPIOx == GPIOF)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a18      	ldr	r2, [pc, #96]	; (800076c <GPIO_Peripehral_clk_control+0x1ac>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d106      	bne.n	800071c <GPIO_Peripehral_clk_control+0x15c>
					GPIOF_PCLK_DI();
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a11      	ldr	r2, [pc, #68]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000714:	f023 0320 	bic.w	r3, r3, #32
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
}
 800071a:	e014      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
				else if(pGPIOx == GPIOG)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <GPIO_Peripehral_clk_control+0x1b0>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d106      	bne.n	8000732 <GPIO_Peripehral_clk_control+0x172>
					GPIOG_PCLK_DI();
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 800072a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000730:	e009      	b.n	8000746 <GPIO_Peripehral_clk_control+0x186>
				else if(pGPIOx == GPIOH)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <GPIO_Peripehral_clk_control+0x1b4>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d105      	bne.n	8000746 <GPIO_Peripehral_clk_control+0x186>
					GPIOH_PCLK_DI();
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <GPIO_Peripehral_clk_control+0x198>)
 8000740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40020000 	.word	0x40020000
 8000758:	40023800 	.word	0x40023800
 800075c:	40020400 	.word	0x40020400
 8000760:	40020800 	.word	0x40020800
 8000764:	40020c00 	.word	0x40020c00
 8000768:	40021000 	.word	0x40021000
 800076c:	40021400 	.word	0x40021400
 8000770:	40021800 	.word	0x40021800
 8000774:	40021c00 	.word	0x40021c00
 8000778:	40022000 	.word	0x40022000

0800077c <GPIO_ToggleOutputPin>:
		pGPIOx->ODR|=(1<<PinNumber);
	}

}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx ,uint8_t PinNumber)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
|  0  |  0  |    0    |
|  0  |  1  |    1    |
|  1  |  0  |    1    |
|  1  |  1  |    0    |
	 */
    pGPIOx->ODR^=(1<<PinNumber); // when xored with 1 the bit toggles if it is xored with a bit with value 0 then it remains the same
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	78fa      	ldrb	r2, [r7, #3]
 800078e:	2101      	movs	r1, #1
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	405a      	eors	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	615a      	str	r2, [r3, #20]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <GPIO_baseaddr_to_code>:
{

}

uint32_t GPIO_baseaddr_to_code(GPIO_RegDef_t* m)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint32_t k;

	if( m== GPIOA)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <GPIO_baseaddr_to_code+0x94>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d102      	bne.n	80007be <GPIO_baseaddr_to_code+0x16>
				k=PA;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	e037      	b.n	800082e <GPIO_baseaddr_to_code+0x86>
			else if(m == GPIOB)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <GPIO_baseaddr_to_code+0x98>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d102      	bne.n	80007cc <GPIO_baseaddr_to_code+0x24>
				k=PB;
 80007c6:	2301      	movs	r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	e030      	b.n	800082e <GPIO_baseaddr_to_code+0x86>
			else if(m == GPIOC)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <GPIO_baseaddr_to_code+0x9c>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d102      	bne.n	80007da <GPIO_baseaddr_to_code+0x32>
				k=PC;
 80007d4:	2308      	movs	r3, #8
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e029      	b.n	800082e <GPIO_baseaddr_to_code+0x86>
			else if(m == GPIOD)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <GPIO_baseaddr_to_code+0xa0>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d102      	bne.n	80007e8 <GPIO_baseaddr_to_code+0x40>
				k=PD;
 80007e2:	2309      	movs	r3, #9
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e022      	b.n	800082e <GPIO_baseaddr_to_code+0x86>
			else if(m == GPIOE)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <GPIO_baseaddr_to_code+0xa4>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d102      	bne.n	80007f6 <GPIO_baseaddr_to_code+0x4e>
				k=PE;
 80007f0:	2340      	movs	r3, #64	; 0x40
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	e01b      	b.n	800082e <GPIO_baseaddr_to_code+0x86>
			else if(m == GPIOF)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a15      	ldr	r2, [pc, #84]	; (8000850 <GPIO_baseaddr_to_code+0xa8>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d102      	bne.n	8000804 <GPIO_baseaddr_to_code+0x5c>
				k=PF;
 80007fe:	2341      	movs	r3, #65	; 0x41
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e014      	b.n	800082e <GPIO_baseaddr_to_code+0x86>
			else if(m == GPIOG)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <GPIO_baseaddr_to_code+0xac>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d102      	bne.n	8000812 <GPIO_baseaddr_to_code+0x6a>
				k=PG;
 800080c:	2348      	movs	r3, #72	; 0x48
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	e00d      	b.n	800082e <GPIO_baseaddr_to_code+0x86>
			else if(m == GPIOH)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a10      	ldr	r2, [pc, #64]	; (8000858 <GPIO_baseaddr_to_code+0xb0>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d102      	bne.n	8000820 <GPIO_baseaddr_to_code+0x78>
				k=PH;
 800081a:	2349      	movs	r3, #73	; 0x49
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	e006      	b.n	800082e <GPIO_baseaddr_to_code+0x86>
			else if(m == GPIOI)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <GPIO_baseaddr_to_code+0xb4>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d102      	bne.n	800082e <GPIO_baseaddr_to_code+0x86>
				k=PI;
 8000828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082c:	60fb      	str	r3, [r7, #12]
	return(k);
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	40020000 	.word	0x40020000
 8000840:	40020400 	.word	0x40020400
 8000844:	40020800 	.word	0x40020800
 8000848:	40020c00 	.word	0x40020c00
 800084c:	40021000 	.word	0x40021000
 8000850:	40021400 	.word	0x40021400
 8000854:	40021800 	.word	0x40021800
 8000858:	40021c00 	.word	0x40021c00
 800085c:	40022000 	.word	0x40022000

08000860 <GPIO_IRQConfig>:
//IRQ_configuration = configuring NVIC registers like IPR for priority , ISER for enabling interrupts from specific IRQ and IRQHandling for handling the ISR
// this API is processor specific cortex M4 setup the NVIC registers for the processor
void GPIO_IRQConfig(uint8_t IRQNumber,uint8_t EnDi)
{
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	71bb      	strb	r3, [r7, #6]
	// identify IRQ number based on the pin number for PA0 it will be EXTI0 identify on which IRQ line it issues interrupt
	//first set the priority of the interrupt then enable the interrupt

	volatile uint32_t* ISER = (uint32_t*) NVIC_ISER_BASEADDR;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <GPIO_IRQConfig+0x84>)
 8000872:	61fb      	str	r3, [r7, #28]

	volatile uint32_t* ICER = (uint32_t*)NVIC_ICER_BASEADDR;
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <GPIO_IRQConfig+0x88>)
 8000876:	61bb      	str	r3, [r7, #24]
	uint32_t ISER_reg_bit_pos;

	uint32_t ICER_reg_offset;
	uint32_t ICER_reg_bit_pos;

	ISER_reg_offset = IRQNumber/32;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	b2db      	uxtb	r3, r3
 800087e:	617b      	str	r3, [r7, #20]
	ISER_reg_bit_pos = IRQNumber%32;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 031f 	and.w	r3, r3, #31
 8000886:	613b      	str	r3, [r7, #16]

	ICER_reg_offset = ISER_reg_offset;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	60fb      	str	r3, [r7, #12]
	ICER_reg_bit_pos = ISER_reg_bit_pos;
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	60bb      	str	r3, [r7, #8]

	if (EnDi == ENABLE)
 8000890:	79bb      	ldrb	r3, [r7, #6]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d10e      	bne.n	80008b4 <GPIO_IRQConfig+0x54>
	{
		ISER = ISER + ISER_reg_offset;
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	69fa      	ldr	r2, [r7, #28]
 800089c:	4413      	add	r3, r2
 800089e:	61fb      	str	r3, [r7, #28]
	    *ISER|=(1<<ISER_reg_bit_pos); // enable the interrupt
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2101      	movs	r1, #1
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ac:	431a      	orrs	r2, r3
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	601a      	str	r2, [r3, #0]
			*ICER|=(1 << ICER_reg_bit_pos);

	}


}
 80008b2:	e010      	b.n	80008d6 <GPIO_IRQConfig+0x76>
	else if (EnDi == DISABLE)
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d10d      	bne.n	80008d6 <GPIO_IRQConfig+0x76>
			ICER = ICER + ICER_reg_offset;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4413      	add	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
			*ICER|=(1 << ICER_reg_bit_pos);
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	fa01 f202 	lsl.w	r2, r1, r2
 80008d0:	431a      	orrs	r2, r3
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	601a      	str	r2, [r3, #0]
}
 80008d6:	bf00      	nop
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000e180 	.word	0xe000e180

080008ec <GPIO_IRQHandling>:
	*irq_byte |= (IRQPriority << 4);
}


void GPIO_IRQHandling(uint8_t PinNumber)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	//CLEAR THE EXTI PR REGISTER CORRESPONDING TO PIN NUMBER

	if(EXTI->EXTI_PR & (1<<PinNumber))
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <GPIO_IRQHandling+0x3c>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	79fa      	ldrb	r2, [r7, #7]
 80008fc:	2101      	movs	r1, #1
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	4013      	ands	r3, r2
 8000904:	2b00      	cmp	r3, #0
 8000906:	d009      	beq.n	800091c <GPIO_IRQHandling+0x30>
			{
		EXTI->EXTI_PR|=(1<<PinNumber); // clears the interrupt on peripheral side
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <GPIO_IRQHandling+0x3c>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	2101      	movs	r1, #1
 8000910:	fa01 f202 	lsl.w	r2, r1, r2
 8000914:	4611      	mov	r1, r2
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <GPIO_IRQHandling+0x3c>)
 8000918:	430b      	orrs	r3, r1
 800091a:	6153      	str	r3, [r2, #20]

			}
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40013c00 	.word	0x40013c00

0800092c <__libc_init_array>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	4d0d      	ldr	r5, [pc, #52]	; (8000964 <__libc_init_array+0x38>)
 8000930:	4c0d      	ldr	r4, [pc, #52]	; (8000968 <__libc_init_array+0x3c>)
 8000932:	1b64      	subs	r4, r4, r5
 8000934:	10a4      	asrs	r4, r4, #2
 8000936:	2600      	movs	r6, #0
 8000938:	42a6      	cmp	r6, r4
 800093a:	d109      	bne.n	8000950 <__libc_init_array+0x24>
 800093c:	4d0b      	ldr	r5, [pc, #44]	; (800096c <__libc_init_array+0x40>)
 800093e:	4c0c      	ldr	r4, [pc, #48]	; (8000970 <__libc_init_array+0x44>)
 8000940:	f000 f818 	bl	8000974 <_init>
 8000944:	1b64      	subs	r4, r4, r5
 8000946:	10a4      	asrs	r4, r4, #2
 8000948:	2600      	movs	r6, #0
 800094a:	42a6      	cmp	r6, r4
 800094c:	d105      	bne.n	800095a <__libc_init_array+0x2e>
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f855 3b04 	ldr.w	r3, [r5], #4
 8000954:	4798      	blx	r3
 8000956:	3601      	adds	r6, #1
 8000958:	e7ee      	b.n	8000938 <__libc_init_array+0xc>
 800095a:	f855 3b04 	ldr.w	r3, [r5], #4
 800095e:	4798      	blx	r3
 8000960:	3601      	adds	r6, #1
 8000962:	e7f2      	b.n	800094a <__libc_init_array+0x1e>
 8000964:	0800098c 	.word	0x0800098c
 8000968:	0800098c 	.word	0x0800098c
 800096c:	0800098c 	.word	0x0800098c
 8000970:	08000990 	.word	0x08000990

08000974 <_init>:
 8000974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000976:	bf00      	nop
 8000978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800097a:	bc08      	pop	{r3}
 800097c:	469e      	mov	lr, r3
 800097e:	4770      	bx	lr

08000980 <_fini>:
 8000980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000982:	bf00      	nop
 8000984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000986:	bc08      	pop	{r3}
 8000988:	469e      	mov	lr, r3
 800098a:	4770      	bx	lr
